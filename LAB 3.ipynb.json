{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random as ram\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy\n",
    "from scipy import stats\n",
    "from scipy.stats import poisson\n",
    "from scipy.stats import rayleigh\n",
    "from scipy.stats import norm\n",
    "from scipy.stats import lognorm\n",
    "import math as math\n",
    "from astropy.table import Table, Column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#A \n",
    "#1\n",
    "\n",
    "fig, ax = plt.subplots(1, 1)\n",
    "\n",
    "plt.title(\"Distribution of temperature reading (meta-data) \")\n",
    "plt.xlabel(\"The temperature reading\")\n",
    "plt.ylabel(\"Probability density\")\n",
    "\n",
    "mu, sigma = 12, 0.4 # mean and standard deviation\n",
    "\n",
    "y = stats.norm.rvs(mu, sigma, 100000)\n",
    "\n",
    "bad_data = [10., 10.3, 2.1, 0., 0., 15.6, 22.3, 12.7]\n",
    "data = np.concatenate((y, bad_data), axis=None)\n",
    "plt.hist(data, bins='auto')\n",
    "\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#A \n",
    "#2\n",
    "statistical question\n",
    "In order to get rid of bad data, If I choose the good data region as 10 - 14, what is the probability of correction \n",
    "for both getting true good data in good data set and getting true bad data in bad data set\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#A \n",
    "#3\n",
    "Count the number of data in dataset to find the number of data smaller than 10 and the number of data larger than 14.\n",
    "Identify the numbers of data which are truly bad data and which are not. \n",
    "Use the number of bad data out of range divided\n",
    "by the number of data out of range to calculate the probability of correction; \n",
    "And Use the number of identified good data divided\n",
    "by the number of total good data to calculate the probability of correction\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17.684871716725063\n",
      "            TRUE               FALSE        \n",
      "--- ------------------- --------------------\n",
      "pos  0.9998837257279177   0.6041814658242666\n",
      "neg 0.39581853417573337 9.99990573437869e-06\n"
     ]
    }
   ],
   "source": [
    "#A \n",
    "#4\n",
    "sigma_smaller10 = (10.5-mu)/sigma\n",
    "proba_smaller10 = norm.cdf(sigma_smaller10)\n",
    "numberOfOut1 = 100008 * proba_smaller10\n",
    "sigma_larger14 = (13.5-mu)/sigma\n",
    "proba_larger14 = 1 - norm.cdf(sigma_larger14)\n",
    "numberOfOut2 = 100008 * proba_larger14\n",
    "\n",
    "numberOfOut = numberOfOut1 + numberOfOut2\n",
    "numberOfBadOut = 0\n",
    "\n",
    "for i in bad_data :\n",
    "    if i< 10.5 or i > 13.5 :\n",
    "        numberOfBadOut = numberOfBadOut + 1\n",
    "\n",
    "numberOfGoodOut = numberOfOut - numberOfBadOut\n",
    "\n",
    "numberOfBadIn = 8 - numberOfBadOut\n",
    "numberOfGoodIn = 100000 - numberOfGoodOut\n",
    "\n",
    "t = Table()\n",
    "a = np.array(['pos', 'neg'], dtype=np.str)\n",
    "T = [numberOfGoodIn/numberOfIn, numberOfBadOut/numberOfOut]\n",
    "F = [numberOfGoodOut/numberOfOut, numberOfBadIn/numberOfIn]\n",
    "t = Table([a, T, F], names = ('  ', 'TRUE', 'FALSE'))\n",
    "\n",
    "print(t)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the number of omissions, where you threw out good data:10.684871716725063\n"
     ]
    }
   ],
   "source": [
    "#B\n",
    "print(\"the number of omissions, where you threw out good data:\"  +  str(numberOfGoodOut))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mistakes of commission (bad data getting in) : 1\n"
     ]
    }
   ],
   "source": [
    "#C\n",
    "print(\"mistakes of commission (bad data getting in) : \" +  str(numberOfBadIn))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x1a142c71d0>"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#a = np.concatenate(np.array(stats.norm.rvs( scale = 1, size = 100000)), np.array(stats.norm.rvs( scale = 1, size = 100000)), axis = 1)\n",
    "a = np.vstack((stats.norm.rvs( scale = 1, size = 100000), stats.norm.rvs( scale = 1, size = 100000)))\n",
    "a.shape\n",
    "fig, ax = plt.subplots(1, 1)\n",
    "h = ax.hist2d(a[0,:],a[1,:],bins=100, density=True);\n",
    "ax.set_aspect('equal', 'box')\n",
    "plt.xlim([-3 , 3])\n",
    "plt.ylim([-3 , 3])\n",
    "plt.title(\"2D Histogram of positional uncertainty\", fontsize = 24)\n",
    "plt.ylabel(\"$\\Delta$y arcseconds\", fontsize = 18)\n",
    "plt.xlabel(\"$\\Delta$x arcseconds\", fontsize = 18)\n",
    "plt.colorbar(h[3], ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "What is the question in words?\n",
    "With a background of 2-D normal distribution, what is the probability of the 5-sigma signal under this background "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "What is the question in math?\n",
    "With a rayleigh distribution, what is the minimum distance for us to claim as a movement if we consider the\n",
    "this signal as the out of 5 sigma probability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9999997133484281\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "5.489079776034238"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "proba_5sigma = norm.cdf(5)\n",
    "distance = rayleigh.ppf(proba_5sigma)\n",
    "print(\"5 sigma' detection of movement : \" + distance = rayleigh.ppf(proba_5sigma))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is the question in words?\n",
    "For 2D Histogram of positional uncertainty, what is  x,y region inside 5-sigma detaction."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is the question in math?\n",
    "For 2D Histogram of positional uncertainty, integral from certain r = sqrt(x^2 + y ^2) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A\n",
    "What is the question in words?\n",
    "A event with expectation value to be 1 per minute has a poisson distribution. \n",
    "With the background of sum the events for 15days(8 hour per days), \n",
    "if we get a data of 6800, what is the significant of this data(6800)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "B\n",
    "What is the question in math?\n",
    "Calcalate the probability to get a data of 6800 \n",
    "with a background which is the sum of poisson distribution with expectation value to be 1.\n",
    "1.construct a possion distribution with expectation value to be 1\n",
    "2.convolve this distribution by 7200 (15*8*60) time to get the sum of distribution\n",
    "3.integral from 0 to 6800 to get the probability\n",
    "4.convert this probability to the corresponding sigma in normal distribution\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0133280183917768e-06\n",
      "-4.750747965777188\n"
     ]
    }
   ],
   "source": [
    "prob_6800 = poisson.cdf(6800,7200)\n",
    "sigma = stats.norm.ppf(prob_6800)\n",
    "print(\"The converted sigma = \" + sigma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
