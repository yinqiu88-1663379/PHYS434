{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lab 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##normal distribution\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy\n",
    "from scipy import stats\n",
    "from scipy.stats import norm\n",
    "from scipy.stats import binom\n",
    "\n",
    "\n",
    "sigma = 3\n",
    "x = np.linspace(-3,3, 100)\n",
    "y = norm.pdf(x, 0, sigma)\n",
    "plt.plot(x,y)\n",
    "plt.show()\n",
    "p = norm.cdf([-2, -1,1, 2])\n",
    "f = norm.ppf([0.02275013, 0.15865525, 0.84134475, 0.97724987])\n",
    "print(p)\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It same as z-score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##Lognormal\n",
    "from scipy.stats import lognorm\n",
    "##a\n",
    "s = 0.5\n",
    "r = lognorm.rvs(s, size=100000)\n",
    "x = np.linspace(0, lognorm.ppf(0.999999999, s), 1000)\n",
    "\n",
    "\n",
    "##b\n",
    "fig, ax = plt.subplots(1, 1)\n",
    "ax.hist(r,250, density=True)\n",
    "ax.plot(x, lognorm.pdf(x, s), lw=5, alpha=0.7, label='lognorm pdf')\n",
    "plt.xlim([-4,10])\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "probailty =  (0.9772498680518208, 0.5)\n",
      "sigma =  2.718281828459046\n"
     ]
    }
   ],
   "source": [
    "##problem 3 \n",
    "##a. select a value 2\n",
    "## b. statistical question: If there is no signal, ; what is the probabilit \n",
    "##                        y that the data produce s a signal \n",
    "##                        that is equally or more signal-like than what I observed?\n",
    "## c. mathematical integral : intergral from 2 to infinity of lognorm distribution\n",
    "p = norm.cdf(2), s\n",
    "print(\"probailty = \", p)\n",
    "sigma = lognorm.ppf(norm.cdf(2), s)\n",
    "print(\"sigma = \", sigma)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "probailty =  (0.9821355794371834, 0.5)\n",
      "sigma =  2.8576511180631634\n",
      "probailty =  (0.9640696808870742, 0.5)\n",
      "sigma =  2.45960311115695\n"
     ]
    }
   ],
   "source": [
    "p1 = norm.cdf(2.1), s\n",
    "print(\"probailty = \", p1)\n",
    "sigma1 = lognorm.ppf(norm.cdf(2.1), s)\n",
    "print(\"sigma = \", sigma1)\n",
    "p2 = norm.cdf(1.8), s\n",
    "print(\"probailty = \", p2)\n",
    "sigma2 = lognorm.ppf(norm.cdf(1.8), s)\n",
    "print(\"sigma = \", sigma2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##Binomial\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots(1, 1)\n",
    "n, p = 100, 0.4\n",
    "x = np.arange(binom.ppf(0.01, n, p), binom.ppf(0.99, n, p))\n",
    "ax.plot(x, binom.pmf(x, n, p), ms=8, label='binom pmf')\n",
    "ax.vlines(x, 0, binom.pmf(x, n, p), lw=5, alpha=0.5)\n",
    "\n",
    "rv = binom(n, p)\n",
    "ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1, label='frozen pmf')\n",
    "ax.legend(loc='best', frameon=False)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# c \n",
    "# Check the chance to ge more than half of sucess if n = 100, p = 0.4\n",
    "print(1- sum(binom.pmf(np.arrange(0,50), n, p)))\n",
    "\n",
    "#d\n",
    "#For binomial, it is no meaning to do probability density function. Because the probablity of binom is discrete.\n",
    "\n",
    "#e\n",
    "#the probability coulb be discontinuous for certain experiemnt.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
